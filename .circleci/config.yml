version: 2.1

###################
#  EXECUTORS
###################

executors:
  node:
    docker:
      - image: cimg/node:16.13

  android:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45

  ios:
    macos:
      xcode: '13.2.1'

###################
#  COMMANDS
###################

commands:
  install_node_version:
    description: Install Node version with NVM
    steps:
      - run:
          name: Install Node version with NVM
          command: |
            set +e
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            source $BASH_ENV
            nvm install --default
            nvm use

  install_node_modules:
    description: Install Node Dependencies
    steps:
      - restore_cache:
          name: Restore Node Modules
          keys:
            - node-modules-minimal-v1-{{ checksum "yarn.lock" }}-{{ arch }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Node Modules
          key: node-modules-minimal-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - node_modules

  unit_test_native:
    description: Unit Tests Native
    steps:
      - restore_cache:
          name: Restore Tests cache
          keys:
            - jest-cache-{{ checksum "yarn.lock" }}-{{ arch }}
      - run: yarn test:unit:ci
      - save_cache:
          name: Save Tests cache
          key: jest-cache-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - .jest

  install_ruby_modules:
    description: Install Ruby Dependencies
    steps:
      - restore_cache:
          name: Restore Gem dependencies
          key: bundle-minimal-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Install Gem dependencies
          command: |
            bundle install --path=vendor/bundle
      - save_cache:
          name: Save Gem dependencies
          key: bundle-minimal-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - .bundle/
            - vendor/bundle

  skip_testing_soft_deploy_when_new_tag:
    description: Skip job when new tag to deploy
    steps:
      - run: git tag --points-at HEAD | grep -E '^testing_v[0-9]+(\.[0-9]+){2}$' && circleci step halt || true

  setup_android_google_services_config:
    description: Setup android Google services config
    steps:
      - run: echo nothing to do

  install_cocoapods:
    description: Install cocoapods
    steps:
      - run: cd ios/ && bundle exec pod install

  decode_match_secrets:
    description: Decode match secrets
    steps:
      - run: export MATCH_PASSWORD=TBD

  setup_sentry:
    description: Setup sentry credentials
    steps:
      - run:
          name: Setup sentry credentials
          command: |
            echo "[defaults]" >> ~/.sentryclirc
            echo "url=https://sentry.ehp.internal-passculture.app/" >> ~/.sentryclirc
            echo "org=sentry" >> ~/.sentryclirc
            echo "project=pass-culture-app-native-minimalist" >> ~/.sentryclirc
            echo "" >> ~/.sentryclirc
            echo "[auth]" >> ~/.sentryclirc

            # token dka ehp test
            SENTRY_AUTH_TOKEN=8b0617eb4cbf4dff87cfb87f3d58663d9d2e52d647e24e71a4f37e66b2cb9ec9
            echo "token=$SENTRY_AUTH_TOKEN" >> ~/.sentryclirc

###################
#  JOBS
###################

jobs:
  checkout-and-install-deps:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules

  test-lint-and-types:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Linter
          command: |
            yarn test:lint
      - run:
          name: Typescript Type Check
          command: yarn test:types

  test-native:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - unit_test_native

  deploy-soft-testing:
    executor: android
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_testing_soft_deploy_when_new_tag
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_sentry
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=d0e3f9a0c4e0539b6bced275fa87d29e28f04372
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_TESTING
            ./scripts/deploy.sh -o android -t soft -e testing
      - run:
          name: Deploy IOS App for testing environment
          command: |
            export IOS_APPCENTER_API_TOKEN=TBD
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_TESTING
            ./scripts/deploy.sh -o ios -t soft -e testing

  deploy-android-testing-hard:
    executor: android
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_sentry
      - run:
          name: Setup android keystore for testing environment
          command: |
            echo "keystore already present"
#            mkdir -p android/keystores
#            echo $ANDROID_KEYSTORE_TESTING | base64 -di > android/keystores/testing.keystore
#            echo "keyAlias=passculture" >> android/keystores/testing.keystore.properties
#            echo "storeFile=testing.keystore" >> android/keystores/testing.keystore.properties
#            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_TESTING" >> android/keystores/testing.keystore.properties
#            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_TESTING" >>  android/keystores/testing.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=d0e3f9a0c4e0539b6bced275fa87d29e28f04372
            ./scripts/deploy.sh -o android -t hard -e testing


  deploy-ios-testing-hard:
    executor: ios
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo TBD > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for testing environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=e1e52a2eda16b50ceba213c80363e1fa9c0ea702
            ./scripts/deploy.sh -o ios -t hard -e testing

###################
#  WORKFLOWS
###################

workflows:
  version: 2.1
  commit:
    jobs:
      - checkout-and-install-deps:
          filters:
            tags:
              only: /.*/
      - test-lint-and-types:
          requires:
            - checkout-and-install-deps
      - test-native:
          requires:
            - checkout-and-install-deps
      - deploy-soft-testing:
          filters:
            branches:
              only:
                - PC-14133
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-android-testing-hard:
          filters:
            branches:
              only: PC-14133
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-testing-hard:
          filters:
            branches:
              only: PC-14133
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
